package test;

import java.io.InputStream;
import java.nio.charset.StandardCharsets;

import org.junit.jupiter.api.AfterEach;
import org.junit.jupiter.api.Test;

import com.ibm.integration.test.v1.NodeSpy;
import com.ibm.integration.test.v1.SpyObjectReference;
import com.ibm.integration.test.v1.TestMessageAssembly;
import com.ibm.integration.test.v1.TestSetup;
import com.ibm.integration.test.v1.exception.TestException;

import static com.ibm.integration.test.v1.Matchers.*;
import static net.javacrumbs.jsonunit.JsonMatchers.jsonEquals;
import static org.hamcrest.MatcherAssert.assertThat;
import static org.junit.jupiter.api.Assertions.assertEquals;

public class JGRACEIVT_getMode_subflow_0001_Test {

	/*
	 * JGRACEIVT_getMode_subflow_0001_Test
	 * Test generated by IBM App Connect Enterprise Toolkit 12.0.7.0 on Mar 22, 2023 9:59:53 AM
	 */

	@AfterEach
	public void cleanupTest() throws TestException {
		// Ensure any mocks created by a test are cleared after the test runs 
		TestSetup.restoreAllMocks();
	}

	/**
	 * Test for the default branch of getMode operation, expecting to get a CP4I0999 as a response
	 * @throws TestException
	 */
	@Test
	public void JGRACEIVT_getMode_subflow_TestCase_001() throws TestException {

		// Define the SpyObjectReference
		SpyObjectReference nodeReference = new SpyObjectReference().application("JGRACEIVT")
				.messageFlow("gen.JGRACEIVT").node("getMode (Implementation)");

		// Initialise a NodeSpy
		NodeSpy nodeSpy = new NodeSpy(nodeReference);

		// Declare a new TestMessageAssembly object for the message being sent into the node
		TestMessageAssembly inputMessageAssembly = new TestMessageAssembly();

		// Variables used for setting parameters in Local Environment
		String mode = "mode_value";

		// Add Local Environment to Message Assembly for HTTP
		inputMessageAssembly.localEnvironmentPath("HTTP.Input.Path.Segment[0]").setValue("jgraceivt");
		inputMessageAssembly.localEnvironmentPath("HTTP.Input.Path.Segment[1]").setValue("v1");
		inputMessageAssembly.localEnvironmentPath("HTTP.Input.Path.Segment[2]").setValue("hello");
		inputMessageAssembly.localEnvironmentPath("HTTP.Input.Path.Segment[3]").setValue(mode);

		// Add Local Environment to Message Assembly for REST
		inputMessageAssembly.localEnvironmentPath("REST.Input.Method").setValue("GET");
		inputMessageAssembly.localEnvironmentPath("REST.Input.Operation").setValue("getMode");
		inputMessageAssembly.localEnvironmentPath("REST.Input.Path").setValue("/jgraceivt/v1/hello/" + mode);
		inputMessageAssembly.localEnvironmentPath("REST.Input.URI")
				.setValue("http://localhost/jgraceivt/v1/hello/" + mode);
		inputMessageAssembly.localEnvironmentPath("REST.Input.Parameters.mode").setValue(mode);

		// Call the message flow node with the Message Assembly
		nodeSpy.evaluate(inputMessageAssembly, true, "Input");

		// Assert the number of times that the node is called
		assertThat(nodeSpy, nodeCallCountIs(1));

		// Assert the terminal propagate count for the message
		assertThat(nodeSpy, terminalPropagateCountIs("Output", 1));

		// Compare Output Message 1 at output terminal Output
		
		// Get the TestMessageAssembly object for the actual propagated message
		TestMessageAssembly actualMessageAssembly =  nodeSpy.propagatedMessageAssembly("Output", 1);

		// Assert output message body data
		assertEquals("CP4I0999", actualMessageAssembly.messagePath("JSON.Data.code").getStringValue());
	}

	/**
	 * Test for the MAP branch of getMode operation, expecting to get a CP4I0055 as a response
	 * @throws TestException
	 */
	@Test
	public void JGRACEIVT_getMode_subflow_TestCase_002() throws TestException {

		// Define the SpyObjectReference
		SpyObjectReference nodeReference = new SpyObjectReference().application("JGRACEIVT")
				.messageFlow("gen.JGRACEIVT").node("getMode (Implementation)");

		// Initialise a NodeSpy
		NodeSpy nodeSpy = new NodeSpy(nodeReference);

		// Declare a new TestMessageAssembly object for the message being sent into the node
		TestMessageAssembly inputMessageAssembly = new TestMessageAssembly();

		// Variables used for setting parameters in Local Environment
		String mode = "MAP";

		// Add Local Environment to Message Assembly for HTTP
		inputMessageAssembly.localEnvironmentPath("HTTP.Input.Path.Segment[0]").setValue("jgraceivt");
		inputMessageAssembly.localEnvironmentPath("HTTP.Input.Path.Segment[1]").setValue("v1");
		inputMessageAssembly.localEnvironmentPath("HTTP.Input.Path.Segment[2]").setValue("hello");
		inputMessageAssembly.localEnvironmentPath("HTTP.Input.Path.Segment[3]").setValue(mode);

		// Add Local Environment to Message Assembly for REST
		inputMessageAssembly.localEnvironmentPath("REST.Input.Method").setValue("GET");
		inputMessageAssembly.localEnvironmentPath("REST.Input.Operation").setValue("getMode");
		inputMessageAssembly.localEnvironmentPath("REST.Input.Path").setValue("/jgraceivt/v1/hello/" + mode);
		inputMessageAssembly.localEnvironmentPath("REST.Input.URI")
				.setValue("http://localhost/jgraceivt/v1/hello/" + mode);
		inputMessageAssembly.localEnvironmentPath("REST.Input.Parameters.mode").setValue(mode);

		// Call the message flow node with the Message Assembly
		nodeSpy.evaluate(inputMessageAssembly, true, "Input");

		// Assert the number of times that the node is called
		assertThat(nodeSpy, nodeCallCountIs(1));

		// Assert the terminal propagate count for the message
		assertThat(nodeSpy, terminalPropagateCountIs("Output", 1));

		// Compare Output Message 1 at output terminal Output
		
		// Get the TestMessageAssembly object for the actual propagated message
		TestMessageAssembly actualMessageAssembly =  nodeSpy.propagatedMessageAssembly("Output", 1);

		// Assert output message body data
		assertEquals("CP4I0055", actualMessageAssembly.messagePath("JSON.Data.code").getStringValue());
	}

	/**
	 * Test for the ESQL branch of getMode operation, expecting to get a CP4I0055 as a response
	 * @throws TestException
	 */
	@Test
	public void JGRACEIVT_getMode_subflow_TestCase_003() throws TestException {

		// Define the SpyObjectReference
		SpyObjectReference nodeReference = new SpyObjectReference().application("JGRACEIVT")
				.messageFlow("gen.JGRACEIVT").node("getMode (Implementation)");

		// Initialise a NodeSpy
		NodeSpy nodeSpy = new NodeSpy(nodeReference);

		// Declare a new TestMessageAssembly object for the message being sent into the node
		TestMessageAssembly inputMessageAssembly = new TestMessageAssembly();

		// Variables used for setting parameters in Local Environment
		String mode = "ESQL";

		// Add Local Environment to Message Assembly for HTTP
		inputMessageAssembly.localEnvironmentPath("HTTP.Input.Path.Segment[0]").setValue("jgraceivt");
		inputMessageAssembly.localEnvironmentPath("HTTP.Input.Path.Segment[1]").setValue("v1");
		inputMessageAssembly.localEnvironmentPath("HTTP.Input.Path.Segment[2]").setValue("hello");
		inputMessageAssembly.localEnvironmentPath("HTTP.Input.Path.Segment[3]").setValue(mode);

		// Add Local Environment to Message Assembly for REST
		inputMessageAssembly.localEnvironmentPath("REST.Input.Method").setValue("GET");
		inputMessageAssembly.localEnvironmentPath("REST.Input.Operation").setValue("getMode");
		inputMessageAssembly.localEnvironmentPath("REST.Input.Path").setValue("/jgraceivt/v1/hello/" + mode);
		inputMessageAssembly.localEnvironmentPath("REST.Input.URI")
				.setValue("http://localhost/jgraceivt/v1/hello/" + mode);
		inputMessageAssembly.localEnvironmentPath("REST.Input.Parameters.mode").setValue(mode);

		// Call the message flow node with the Message Assembly
		nodeSpy.evaluate(inputMessageAssembly, true, "Input");

		// Assert the number of times that the node is called
		assertThat(nodeSpy, nodeCallCountIs(1));

		// Assert the terminal propagate count for the message
		assertThat(nodeSpy, terminalPropagateCountIs("Output", 1));

		// Compare Output Message 1 at output terminal Output
		
		// Get the TestMessageAssembly object for the actual propagated message
		TestMessageAssembly actualMessageAssembly =  nodeSpy.propagatedMessageAssembly("Output", 1);

		// Assert output message body data
		assertEquals("CP4I0055", actualMessageAssembly.messagePath("JSON.Data.code").getStringValue());
	}

	/**
	 * Test for the JAVA branch of getMode operation, expecting to get a CP4I0055 as a response
	 * @throws TestException
	 */
	@Test
	public void JGRACEIVT_getMode_subflow_TestCase_004() throws TestException {

		// Define the SpyObjectReference
		SpyObjectReference nodeReference = new SpyObjectReference().application("JGRACEIVT")
				.messageFlow("gen.JGRACEIVT").node("getMode (Implementation)");

		// Initialise a NodeSpy
		NodeSpy nodeSpy = new NodeSpy(nodeReference);

		// Declare a new TestMessageAssembly object for the message being sent into the node
		TestMessageAssembly inputMessageAssembly = new TestMessageAssembly();

		// Variables used for setting parameters in Local Environment
		String mode = "JAVA";

		// Add Local Environment to Message Assembly for HTTP
		inputMessageAssembly.localEnvironmentPath("HTTP.Input.Path.Segment[0]").setValue("jgraceivt");
		inputMessageAssembly.localEnvironmentPath("HTTP.Input.Path.Segment[1]").setValue("v1");
		inputMessageAssembly.localEnvironmentPath("HTTP.Input.Path.Segment[2]").setValue("hello");
		inputMessageAssembly.localEnvironmentPath("HTTP.Input.Path.Segment[3]").setValue(mode);

		// Add Local Environment to Message Assembly for REST
		inputMessageAssembly.localEnvironmentPath("REST.Input.Method").setValue("GET");
		inputMessageAssembly.localEnvironmentPath("REST.Input.Operation").setValue("getMode");
		inputMessageAssembly.localEnvironmentPath("REST.Input.Path").setValue("/jgraceivt/v1/hello/" + mode);
		inputMessageAssembly.localEnvironmentPath("REST.Input.URI")
				.setValue("http://localhost/jgraceivt/v1/hello/" + mode);
		inputMessageAssembly.localEnvironmentPath("REST.Input.Parameters.mode").setValue(mode);

		// Call the message flow node with the Message Assembly
		nodeSpy.evaluate(inputMessageAssembly, true, "Input");

		// Assert the number of times that the node is called
		assertThat(nodeSpy, nodeCallCountIs(1));

		// Assert the terminal propagate count for the message
		assertThat(nodeSpy, terminalPropagateCountIs("Output", 1));

		// Compare Output Message 1 at output terminal Output
		
		// Get the TestMessageAssembly object for the actual propagated message
		TestMessageAssembly actualMessageAssembly =  nodeSpy.propagatedMessageAssembly("Output", 1);

		// Assert output message body data
		assertEquals("CP4I0055", actualMessageAssembly.messagePath("JSON.Data.code").getStringValue());
	}

}
